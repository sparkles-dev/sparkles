import org.apache.tools.ant.filters.*

plugins {
  id 'java'
  id 'application'
  id 'com.adarshr.test-logger'
  id 'com.palantir.git-version'
  id 'com.palantir.docker'
  id 'org.inferred.processors'
}

group = 'sparkles'
version = gitVersion()
description = 'An entity framework for Javalin'

mainClassName = 'sparkles.EntityApp'
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
  // 3rd party
  implementation 'com.google.guava:guava:27.0.1-jre'
  implementation 'io.javalin:javalin:3.+'
  implementation 'io.jsonwebtoken:jjwt:0.9.1'
  implementation 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'
  implementation 'org.hibernate:hibernate-core:5.4.10.Final'
  implementation 'org.hsqldb:hsqldb:2.5.0'
  implementation 'org.slf4j:slf4j-api:1.7.29'
  implementation 'org.slf4j:slf4j-simple:1.7.29'
  implementation 'org.springframework.data:spring-data-commons:2.2.3.RELEASE'
  implementation 'org.springframework.data:spring-data-jpa:2.2.3.RELEASE'

  // project
  implementation project(':support:common:util')
  implementation project(':support:common:flyway')
  implementation project(':support:javalin:api')
  implementation project(':support:javalin:persistence:flyway')
  implementation project(':support:javalin:security:jwt')
  implementation project(':support:javalin:security:keycloak')
  implementation project(':support:javalin:persistence:springdata')

  // apt
  processor 'org.projectlombok:lombok:1.18.10'

  // testing
  testImplementation project(':support:javalin:testing')
  testImplementation 'com.squareup.okhttp3:okhttp:3.+'
  testImplementation 'io.javalin:javalin:3.+'
  testImplementation 'junit:junit:4.+'
  testImplementation 'org.assertj:assertj-core:3.14.0'
}

processResources {

  with copySpec {
    from 'src/main/filteredResources'
    filter(ReplaceTokens, tokens: [
      buildApp: 'momed',
      buildVersion: gitVersion(),
      buildTime: new Date().format('yyyy-MM-dd\'T\'HH:mm:ss\'Z\''),
      gradleVersion: gradle.gradleVersion
    ])
  }
}

docker {
  name 'sparkles/entity'
  dockerfile file("${rootDir}/tools/docker/gradle-app/Dockerfile")
  files tasks.distZip.outputs
  buildArgs([bin: 'entity', zip: tasks.distZip.archiveName])
  pull true
}

run.doFirst {
  environment 'ENVIRONMENT', 'develop'
}

testlogger {
  theme 'mocha'
  showStandardStreams true
}
